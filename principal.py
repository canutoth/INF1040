# principal.py
# -----------------------------------------------------------------------------
# M√≥dulo principal do sistema de gerenciamento de estacionamento
# -----------------------------------------------------------------------------
import csv
import sys
import usuario as usuario_mod
import login as login_mod
import fila        as fila_mod
import estacionamento as est_mod

# ---------------------------- vari√°veis globais ------------------------------
FILA                = None          # ponteiro para a fila principal
ESTACIONAMENTOS     = []            # lista de objetos/estruturas de estacionamento
USUARIO_ATUAL       = None          # objeto usu√°rio com sess√£o ativa

# Mapa simples de erros para mensagens
ERROS = {
    "OPCAO_INVALIDA" : "Op√ß√£o inv√°lida!",
    "NAO_AUTENTICADO": "√â preciso estar autenticado para realizar esta opera√ß√£o.",
    "AUTH_FAIL"      : "Login ou senha incorretos.",
    "SEM_VAGAS"      : "N√£o h√° vagas dispon√≠veis neste momento ‚Äì voc√™ foi colocado(a) na fila.",
    "VAGA_NAO_ENCONTRADA": "Vaga inexistente.",
}

# ------------------------------ rotinas chave -------------------------------
def IniciarSistema():
    global FILA, ESTACIONAMENTOS

    # 1. Carregar usu√°rios e convidados
    usuario_mod.carregarUsuarios("users.csv")
    usuario_mod.carregarUsuarios("guests.csv", tipo_padrao=2)

    # 2. Fila
    FILA = fila_mod.inicializarFila()

    # 3. Estacionamentos 
    ESTACIONAMENTOS = est_mod.criarEstacionamentosDeCSV("estacionamentos.csv")

    print("‚úÖ Sistema iniciado com sucesso.")

"""
    Nome: ExibirMenuPrincipal()

    Objetivo:
       - Controlar o loop de intera√ß√£o de alto n√≠vel com o usu√°rio.

    Acoplamento:
       - leitura: input() para selecionar op√ß√£o.
       - retorno: None ‚Äî loop somente termina em EncerrarSistema().

    Condi√ß√µes de Acoplamento:
       AE: IniciarSistema() j√° executado.
       AS: Usu√°rio navega entre op√ß√µes 1‚Äì5, com tratamento de erro para outras.

    Descri√ß√£o:
       1) Construir dicion√°rio opcoes {str: fun√ß√£o}.
       2) Loop infinito: exibir menu textual, ler escolha.
       3) Se escolha v√°lida ‚Üí chamar fun√ß√£o correspondente.
          Caso contr√°rio ‚Üí TratarErros("OPCAO_INVALIDA").

    Hip√≥teses:
       - Todas fun√ß√µes chamadas est√£o importadas e operacionais.

    Restri√ß√µes:
       - Executa indefinidamente at√© EncerrarSistema() chamar sys.exit().
    """
def ExibirMenuPrincipal():
    opcoes = {
        "1": AutenticarUsuario,
        #TODO: "2": CriarUsuario,
        "2": AlocarVaga,
        "3": LiberarVaga,
        "4": ExibirResumo,
        "5": EncerrarSistema
    }
    while True:
        print("\n======  MENU PRINCIPAL  ======")
        print("1) Login")

        #TODO: primeiro mostra o Login, depois mostra o restante do menu
        print("2) Alocar vaga")
        print("3) Liberar vaga")
        print("4) Exibir resumo")
        print("5) Sair")
        escolha = input("Escolha ‚Ä∫ ").strip()

        acao = opcoes.get(escolha)
        if acao:
            acao()
        else:
            TratarErros("OPCAO_INVALIDA")

"""
    Nome: AutenticarUsuario()

    Objetivo:
       - Solicitar credenciais e validar acesso do usu√°rio.

    Acoplamento:
       - m√≥dulos: login.autentica(), usuario.usuarios.
       - leitura: input() (login, senha).
       - efeito: define vari√°vel global USUARIO_ATUAL.

    Condi√ß√µes de Acoplamento:
       AE: usuario.usuarios cont√©m tuplas v√°lidas.
       AS: Se credenciais corretas ‚Üí USUARIO_ATUAL recebe login.
       AS: Se inv√°lidas ‚Üí TratarErros("AUTH_FAIL").

    Descri√ß√£o:
       1) Ler login e senha via input().
       2) Chamar login.autentica(login, senha, usuario.usuarios).
       3) Se True ‚Üí armazenar login, exibir mensagem de boas-vindas.
          Sen√£o ‚Üí chamar TratarErros("AUTH_FAIL").

    Hip√≥teses:
       - Fun√ß√£o autentica retorna booleano conforme especifica√ß√£o.

    Restri√ß√µes:
       - Nenhum.
    """
def AutenticarUsuario():
    global USUARIO_ATUAL
    login_inp = input("Login ‚Ä∫ ").strip()
    senha_inp = input("Senha ‚Ä∫ ").strip()

    usuario = login_mod.autentica(login_inp, senha_inp, usuario_mod.listarUsuarios())
    if usuario:
        USUARIO_ATUAL = usuario
        print(f"‚úÖ Bem-vindo(a), {USUARIO_ATUAL.login}!")
    else:
        TratarErros("AUTH_FAIL")

"""
    Nome: AlocarVaga()

    Objetivo:
       - Tentar reservar uma vaga para o usu√°rio autenticado ou inseri-lo na fila.

    Acoplamento:
       - leitura: vari√°vel global USUARIO_ATUAL.
       - m√≥dulos previstos: est_mod.getVagaDisponivel(), vaga_mod.OcuparVaga(),
         GerenciaFila().
       - retorno: None.

    Condi√ß√µes de Acoplamento:
       AE: Usu√°rio deve estar autenticado.
       AE: ESTACIONAMENTOS configurado; m√≥dulos est_mod/vaga_mod implementados.
       AS: Se vaga dispon√≠vel ‚Üí ocupada; sen√£o ‚Üí usu√°rio entra na fila.

    Descri√ß√£o:
       1) Verificar autentica√ß√£o; se n√£o, erro.
       2) Permitir escolha do estacionamento via _selecionar_estacionamento().
       3) Chamar est_mod.getVagaDisponivel(est).
          a. Se -1 ‚Üí GerenciaFila() + mensagem SEM_VAGAS.
          b. Caso contr√°rio ‚Üí vaga_mod.OcuparVaga() + confirma√ß√£o.

    Hip√≥teses:
       - Fun√ß√µes de est_mod e vaga_mod seguem contrato previsto.

    Restri√ß√µes:
       - Cont√©m TODOs at√© implementa√ß√£o dos demais m√≥dulos.
    """
def AlocarVaga():
    if USUARIO_ATUAL is None:
        TratarErros("NAO_AUTENTICADO")
        return

    est = est_mod.selecionarEstacionamento(ESTACIONAMENTOS)
    if est == -1:
        TratarErros("OPCAO_INVALIDA")
    if not est:
        print("Nenhum estacionamento selecionado para alocar vaga")
        return
    
    vaga_disp = est_mod.getVagaDisponivel(est)
    if vaga_disp == -1:
        GerenciaFila(USUARIO_ATUAL)
        TratarErros("SEM_VAGAS")
    else:
        est.ocuparVagaPorLogin(USUARIO_ATUAL.login)
        print(f"‚úÖ Vaga {vaga_disp} ocupada. Boa estadia!")

"""
    Nome: LiberarVaga()

    Objetivo:
       - Desocupar uma vaga e disparar atualiza√ß√£o de estado (fila).

    Acoplamento:
       - leitura: USUARIO_ATUAL, input() para id da vaga.
       - m√≥dulos previstos: vaga_mod.LiberarVaga(), AtualizarEstado().

    Condi√ß√µes de Acoplamento:
       AE: Usu√°rio precisa estar autenticado.
       AE: ID informado deve ser num√©rico e existente.
       AS: Se sucesso ‚Üí vaga liberada + AtualizarEstado().
       AS: Se falha ‚Üí mensagem VAGA_NAO_ENCONTRADA.

    Descri√ß√£o:
       1) Checar autentica√ß√£o.
       2) Selecionar estacionamento.
       3) Ler ID da vaga e chamar vaga_mod.LiberarVaga().
       4) Resultado 0 ‚Üí sucesso; else ‚Üí erro.
       5) Em sucesso ‚Üí AtualizarEstado(est).

    Hip√≥teses:
       - vaga_mod.LiberarVaga retorna 0 em sucesso.

    Restri√ß√µes:
       - Cont√©m TODOs pendentes.
    """
def LiberarVaga():
    if USUARIO_ATUAL is None:
        TratarErros("NAO_AUTENTICADO")
        return

    for est in ESTACIONAMENTOS:
        vaga_id = est.liberarVagaDe(USUARIO_ATUAL)
        if vaga_id is not None:
            print(f"‚úÖ Vaga {vaga_id} liberada no estacionamento '{est.nome}'.")
            AtualizarEstado(est)
            return

    TratarErros("VAGA_NAO_ENCONTRADA")

"""
    Nome: GerenciaFila(usuario_login)

    Objetivo:
       - Garantir que o usu√°rio esteja na fila e ordenar por prioridade.

    Acoplamento:
       - FILA global e fun√ß√µes de fila_mod.

    Condi√ß√µes de Acoplamento:
       AE: FILA inicializada.
       AS: Se usu√°rio n√£o presente ‚Üí adicionado; fila reordenada.

    Descri√ß√£o:
       1) Consultar posi√ß√£o atual via fila_mod.consultarPosicaoNaFila().
       2) Se -1 ‚Üí adicionarNaFila().
       3) Ordenar fila por prioridade.

    Hip√≥teses:
       - Prioridade definida na l√≥gica interna de fila_mod.

    Restri√ß√µes:
       - Nenhum.
    """
def GerenciaFila(usuario):
    if fila_mod.consultarPosicaoNaFila(FILA, usuario) == -1:
        fila_mod.adicionarNaFila(FILA, usuario)
        fila_mod.ordenarFilaPorPrioridade(FILA)

"""
    Nome: AtualizarEstado(est)

    Objetivo:
       - Ap√≥s libera√ß√£o de vaga, realocar primeiro usu√°rio da fila.

    Acoplamento:
       - est_mod.getVagaDisponivel(), fila_mod.* e vaga_mod.OcuparVaga().

    Condi√ß√µes de Acoplamento:
       AE: est √© objeto Estacionamento v√°lido.
       AS: Se existir vaga e fila n√£o vazia ‚Üí ocupar vaga e remover usu√°rio.

    Descri√ß√£o:
       1) Obter vaga livre via est_mod.getVagaDisponivel().
       2) Se -1 ‚Üí retornar (nenhuma a√ß√£o).
       3) Obter primeiro usu√°rio via fila_mod.consultarPosicaoNaFila() ou m√©todo pr√≥prio.
       4) Se existir ‚Üí vaga_mod.OcuparVaga() e fila_mod.removerDaFila().
       5) Exibir notifica√ß√£o ao usu√°rio atendido.

    Hip√≥teses:
       - M√©todos de fila_mod e vaga_mod implementados.

    Restri√ß√µes:
       - Cont√©m TODOs pendentes.
    """
def AtualizarEstado(est):
    vaga = est.getVagaDisponivel
    if not vaga:
        return

    # h√° vaga livre ‚Äì verificar fila
    prox = fila_mod.retornaPrimeiro(FILA)  
    if prox is not None:
        sucesso = est.ocuparVagaPorLogin(prox.login)
        if sucesso:
            fila_mod.removerDaFila(FILA, prox)
            print(f"üîî Usu√°rio {prox.login} foi chamado para ocupar a vaga {vaga}.")

"""
    Nome: ExibirResumo()

    Objetivo:
       - Mostrar panorama do sistema: vagas, fila e usu√°rio logado.

    Acoplamento:
       - ESTACIONAMENTOS, FILA, USUARIO_ATUAL e est_mod.BuscarVagasDisponiveis().

    Condi√ß√µes de Acoplamento:
       AE: Sistema inicializado.
       AS: Dados impressos no console.

    Descri√ß√£o:
       1) Iterar sobre ESTACIONAMENTOS: obter vagas livres / total.
       2) Exibir tamanho da FILA (FILA.tamanho).
       3) Exibir USUARIO_ATUAL ou aus√™ncia.

    Hip√≥teses:
       - Objeto FILA possui atributo .tamanho.

    Restri√ß√µes:
       - Cont√©m TODO para c√°lculo de vagas livres.
    """
def ExibirResumo():
    print("\n=======  RESUMO DO SISTEMA  =======")
    est_mod.ListarEstacionamentos(ESTACIONAMENTOS)

    tamanho_fila = FILA.tamanho if FILA else 0
    print(f"Usu√°rios na fila: {tamanho_fila}")
    if USUARIO_ATUAL:
        print(f"Usu√°rio autenticado: {USUARIO_ATUAL}")
    else:
        print("Nenhum usu√°rio autenticado.")

"""
    Nome: EncerrarSistema()

    Objetivo:
       - Persistir dados em CSV e finalizar a aplica√ß√£o.

    Acoplamento:
       - _salvar_csv(), usuario.usuarios, usuario.convidados.

    Condi√ß√µes de Acoplamento:
       AE: Listas globais atualizadas.
       AS: Arquivos ‚Äòusuarios.csv‚Äô e ‚Äòconvidados.csv‚Äô sobrescritos.
       AS: Processo encerrado via sys.exit(0).

    Descri√ß√£o:
       1) Filtrar usuarios sem convidados.
       2) Salvar ambos os CSVs usando _salvar_csv().
       3) Exibir mensagem e chamar sys.exit(0).

    Hip√≥teses:
       - Fun√ß√£o _salvar_csv grava corretamente.

    Restri√ß√µes:
       - N√£o retorna (termina execu√ß√£o do Python).
    """
def EncerrarSistema():
    usuario_mod.salvarUsuarios("users.csv", "guests.csv")
    with open("estacionamentos.csv", mode="w", newline='', encoding="utf-8") as f:
       writer = csv.writer(f)
       for est in ESTACIONAMENTOS:
          est.salvarEstadoEmCSV(writer)

    print("‚úîÔ∏è  Dados salvos. At√© logo!")
    sys.exit(0)

"""
    Nome: TratarErros(codigo)

    Objetivo:
       - Exibir mensagem de erro amig√°vel ao usu√°rio.

    Acoplamento:
       - ERROS: dict mapeando c√≥digos ‚Üí mensagens.

    Condi√ß√µes de Acoplamento:
       AE: codigo √© chave existente ou n√£o em ERROS.
       AS: Mensagem correspondente impressa no console.

    Descri√ß√£o:
       1) Fazer lookup em ERROS.get(codigo, 'Erro desconhecido.').
       2) Imprimir mensagem prefixada por s√≠mbolo ‚ö†Ô∏è.

    Hip√≥teses:
       - stdout dispon√≠vel.

    Restri√ß√µes:
       - Fun√ß√£o simples; n√£o altera estado global.
    """
def TratarErros(codigo):
    print(f"‚ö†Ô∏è  {ERROS.get(codigo, 'Erro desconhecido.')}")

# --------------------------- execu√ß√£o direta ---------------------------------
if __name__ == "__main__":
    IniciarSistema()
    ExibirMenuPrincipal()

# # ---------------------------- utilidades internas ----------------------------
# """
#     Nome: _carregar_csv(caminho)

#     Objetivo:
#        - Ler um arquivo .csv delimitado por ‚Äò;‚Äô e convert√™-lo em lista de tuplas.

#     Acoplamento:
#        - caminho: str ‚Äî path para o arquivo .csv.
#        - retorno: list[tuple[str, str, int]] ‚Äî cada tupla ‚Üí (login, senha, tipo).

#     Condi√ß√µes de Acoplamento:
#        AE: caminho deve apontar para um arquivo .csv v√°lido ou inexistente.
#        AS: Caso o arquivo exista, retorna estrutura list[...] com os registros lidos.
#        AS: Se o arquivo n√£o existir, retorna lista vazia (primeira execu√ß√£o).

#     Descri√ß√£o:
#        1) Tentar abrir o arquivo no modo leitura, encoding UTF-8.
#        2) Iterar sobre csv.reader(), convertendo cada linha n√£o vazia
#           em (login, senha, int(tipo)).
#        3) Em FileNotFoundError, capturar exce√ß√£o e retornar [].

#     Hip√≥teses:
#        - Arquivo, se existir, est√° formatado como ‚Äúlogin;senha;tipo‚Äù.

#     Restri√ß√µes:
#        - N√£o cria nem modifica arquivos; somente leitura.
#     """
# def _carregar_csv(caminho, tipo_padrao=None):
#     try:
#         with open(caminho, newline='', encoding="utf-8") as f:
#             reader = csv.reader(f, delimiter=',')
#             for row in reader:
#                 if not row:
#                     continue  # ignora linhas completamente vazias
#                 login = row[0].strip() if len(row) > 0 else ""
#                 senha = row[1].strip() if len(row) > 1 else ""
#                 try:
#                     tipo = int(row[2]) if len(row) > 2 else tipo_padrao
#                 except ValueError:
#                     tipo = tipo_padrao  # ignora erro de convers√£o e usa padr√£o

#                 if login and senha and tipo is not None:
#                     #TODO: isso rompe com o encapsulamento?
#                     usuario_mod.criaInterno(login, senha)
#     except FileNotFoundError:
#         pass

# """
#     Nome: _salvar_csv(caminho, dados)

#     Objetivo:
#        - Persistir em disco a lista de tuplas recebida, no formato CSV ‚Äò;‚Äô.

#     Acoplamento:
#        - caminho: str ‚Äî destino do arquivo .csv.
#        - dados: list[tuple] ‚Äî estrutura j√° validada a ser gravada.
#        - retorno: None.

#     Condi√ß√µes de Acoplamento:
#        AE: dados deve ser iter√°vel contendo sub-iter√°veis (tuplas ou listas).
#        AS: Arquivo √© sobrescrito/ criado com conte√∫do de dados.

#     Descri√ß√£o:
#        1) Abrir (ou criar) o arquivo no modo escrita, encoding UTF-8.
#        2) Utilizar csv.writer(delimiter=';') para gravar cada tupla.

#     Hip√≥teses:
#        - Permiss√µes de escrita no diret√≥rio est√£o concedidas.

#     Restri√ß√µes:
#        - Sobrescreve totalmente o arquivo; n√£o h√° append incremental.
#     """
# def _salvar_csv(caminho, dados):
#     #TODO: pensar em nova forma de atualizar, sem romper com o encapsulamento, agora que usuarios √© lista de Usuario
#     with open(caminho, "w", newline='', encoding="utf-8") as f:
#         writer = csv.writer(f, delimiter=',')
#         writer.writerows(dados)
